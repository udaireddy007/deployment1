resource "aws_iam_user" "test" {
  name          = "test_sand"
  force_destroy = true
}

resource "aws_iam_user" "tf_dev" {
  name              = "tf-dev"
  force_destroy = true

  tags {
    Name = "Mike"
    Application = "test"
  }
}

// IAM role with assume policy and policy arn //

resource "aws_iam_role" "apigateway_cloudwatch_iam_role" {
  name               = "api-gateway-cloudwatch"
  description        = "Amazon API Gateway Push to CW Logs"
  assume_role_policy = "${data.aws_iam_policy_document.apigateway_cw_policy_document.json}"
  
  tags {
    Name        = ""
    Application = ""
  }
}

data "aws_iam_policy_document" "apigateway_cw_policy_document" {
  statement {
    actions = ["sts:AssumeRole"]

    principals {
      type        = "Service"
      identifiers = ["apigateway.amazonaws.com"]
    }
  }
}

resource "aws_iam_role_policy_attachment" "apigateway_cw_policy_attachment" {
  role       = "${aws_iam_role.apigateway_cw_iam-role.name}"
  policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
}

resource "aws_iam_role" "tf_dev" {
  name = "tf-dev"
  
  tags {
    Name = "Mike"
    Application = "test"
  }
}

data "aws_iam_policy_document" "test" {
  statement {
    actions = [
      "secretsmanager:*",
      "secretsmanager:UpdateSecret",
      "secretsmanager:RotateSecret",
      "secretsmanager:PutSecretValue",
      "secretsmanager:List*",
      "secretsmanager:GetSecretValue",
      "secretsmanager:Get*",
      "secretsmanager:DescribeSecret",
      "secretsmanager:DeleteSecret",
      "secretsmanager:CreateSecret",
    ]

    resources = [
      "arn:aws:secretsmanager:${var.aws_region}:${var.aws_account_number}:secret:*",
    ]
  }

  statement {
    actions = [
      "s3:ListAllMyBuckets",
    ]

    resources = [
      "arn:aws:s3:::*",
    ]
  }

  statement {
    actions = [
      "s3:GetObject",
    ]

    resources = [
      "arn:aws:s3:::test-sandbox-bucket/*",
    ]
  }

  statement {
    actions = [
      "s3:ListBucket",
      "s3:GetBucketLocation",
      "s3:ListBucketMultipartUploads",
    ]

    resources = [
      "arn:aws:s3:::test-sandbox-bucket",
    ]
  }
}

resource "aws_iam_user_policy" "test" {
  name   = "jenkinspolicysand"
  user   = "${aws_iam_user.test.name}"
  policy = "${data.aws_iam_policy_document.test.json}"
}

resource "aws_iam_user_policy_attachment" "test_user_policy" {
  user       = "${aws_iam_user.test.name}"
  policy_arn = "${aws_iam_policy.test_json.arn}"
}


resource "aws_iam_policy" "test_json" {
  name   = "testuserinsand"
  policy = "${data.aws_iam_policy_document.test_json.json}"
}


###############IAM User, Policy, Attachment############


resource "aws_iam_user" "eng_dev_test" {
  name          = "eng-dev-test"
  path          = "/"
  force_destroy = true

  tags {
    Name        = "Uday Ragireddy"
    Application = "Test Application"
  }
}

resource "aws_iam_user_policy_attachment" "eng_iam_dev_test" {
  user       = "${aws_iam_user.eng_dev_test.name}"
  policy_arn = "${aws_iam_policy.eng_dev_test_iam.arn}"
}

resource "aws_iam_policy" "eng_dev_test_iam" {
  name   = "sm_rw_policy"
  policy = "${data.aws_iam_policy_document.eng_dev_test_iam_policy.json}"
}

data "aws_iam_policy_document" "eng_dev_test_iam_policy" {
  statement {
    actions = [
      "kms:ListAliases",
      "kms:ListKeys",
      "lambda:ListFunctions",
      "rds:DescribeDBClusters",
    ]

    resources = [
      "*",
    ]
  }
}
